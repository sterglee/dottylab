// NUMAL related imports
     import _root_.java.util.Vector ; 
    import _root_.numal._ ; 
    import _root_.numal.Algebraic_eval._;
    import _root_.numal.Analytic_eval._
    import _root_.numal.Analytic_problems._
    import _root_.numal.Approximation._
    import _root_.numal.Basic._;
    import _root_.numal.FFT._;
    import  _root_.numal.Linear_algebra._; 
    import _root_.numal.Special_functions._;
    import java.text.DecimalFormat 

// gssinv:
//     uses the procedure gsselm to perform a triangular decomposition of the matrix and the procedure inv1 to calculate the inverse matrix
//  procedure parameters:
//              void gssinv(a, n, aux)
//   a:  double(1:n, 1:n);
//   entry:  the matrix whose invrese has toi be calculated;
//   exit:  if aux(3)=n then the calculated inverse matrix
//   n:  int; entry: the order of the matrix
//   aux:  double aux(1:9)
//     entry: aux(2):  a relative tolerance; a reasonable choice for this value is an estimate of the relative precision of the matrix
//                         elements; however, it should not be choosen smaller than the machine precision
//              aux(4); a value used for controlling pivoting, see gsselm
//     exit:   aux(1):  if R is the number of elimination steps performed (see aux(3)), then aux(1) equals 1 if the determinant of
//                         the principal submatrix of order R is positive, else aux(1)=-1
//             aux(3):  the number of elimination steps performed, if aux(3) < n then the process is terminated and no solution will be calculated
//             aux(5):  the modulus of an element which is of maximum absolute value for the matrix given in array a
//             aux(7):  an upper bound for the growth, see gsselm
//             aux(9):  if aux(3)=n then aux(9) will be equal to the 1-norm of the calculated inverse matrix, else aux(9) will be undefined

// Example:

  var aux = new Array[Double](10)
  var a = Array.ofDim[Double](5, 5)
    
    a(1)(1)=4.0;  a(1)(2)=2.0;  a(1)(3)=4.0;  a(1)(4)=1.0;
    a(2)(1)=30.0; a(2)(2)=20.0; a(2)(3)=45.0; a(2)(4)=12.0;
    a(3)(1)=20.0; a(3)(2)=15.0; a(3)(3)=36.0; a(3)(4)=10.0;
    a(4)(1)=35.0; a(4)(2)=28.0; a(4)(3)=70.0; a(4)(4)=20.0;
    aux(2)=1.0e-5;
    aux(4)=8;
    Linear_algebra.gssinv(a,4,aux);
   
 var  fiveDigit = new java.text.DecimalFormat("0.00000E0")
 println("Calculated inverse:")
 for (i<-1 to 4)
   println("\t" + a(i)(1) + "\t" + a(i)(2) + "\t" + a(i)(3) + "\t" + a(i)(4))
 println("\nAUX elements:\n  " +  fiveDigit.format(aux(1)) + "   " +
                       fiveDigit.format(aux(3)) + "   " + fiveDigit.format(aux(5)) + "   " +
                       fiveDigit.format(aux(7)) + "   " + fiveDigit.format(aux(9)));

