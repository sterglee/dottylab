// NUMAL related imports
     import _root_.java.util.Vector ; 
    import _root_.numal._ ; 
    import _root_.numal.Algebraic_eval._;
    import _root_.numal.Analytic_eval._
    import _root_.numal.Analytic_problems._
    import _root_.numal.Approximation._
    import _root_.numal.Basic._;
    import _root_.numal.FFT._;
    import  _root_.numal.Linear_algebra._; 
    import _root_.numal.Special_functions._;
    import java.text.DecimalFormat 

// decsol: Solves a well-conditioned linear system of equations
// Ax=b whose order is small relative to the number of digits in 
// the number representation


// solve the 4 X 4 linear system of equations Ax=b, where A is the Hilbert matrix, for which
// A_{i,j} = 1/(i+j-1), i, j=1, .., 4, and b_i=1/(2+i), i=1,...,4 (so that the solution is the third unit vector: (0, 0, 1,0)^T)
 
 
//  b: double b[1:n]
//    entry:  the right-hand side of the linear system
//    exit:    if aux[3] = n, then the calculated solution of the linear system is overwritten on b, else b remains unaltered
// aux:  double aux[1:3]
//       entry:    aux[2]:  a relative tolerance; a resonable choice for this value is an estimate of the relative precision
//                 of the matrix elements; however, it should not be chosen smaller than the machine precision
//       exit:      aux[1]: if R is the number of elimination steps performed (see aux[3]), then aux[1] equals 1 if the determinant of the principal 
//                 submatrix of order R is positive, else aux[1]=-1
//                   aux[3]: the number of elimination steps performed, if aux[3] < n then the process is terminated and no solution will be calculated
var aux = new Array[Double](4)
aux(2) = 1.0e-5

// a:   double a[1:n, 1:n];
//       entry:   the n-th order matrix;
//         exit:     the calculated lower triangular matrix and unit upper triangular matrix with its unit diagonal omitted 
 var N = 4   // the order of the linear system
 var A =  Array.ofDim[Double](N+1, N+1)
 var b = new Array[Double](N+1)
 for (i<-1 to N) {
   for (j<-1 to N)
     A(i)(j) = 1.0/(i+j-1)
   b(i) = A(i)(3)
 }
 
 var result = decsol(A,N, aux, b)

println("Solution:  " +  b(1) +   "  " + b(2)+ "  " +    b(3) + "  " + b(4))
println("Sign(Det) = " + aux(1) +   "\nNumber of eliminations = " + aux(3))

