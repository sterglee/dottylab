
// this code attempts to have the accesses of matrix memory from 
// multiple threads rather localized, in order to exploit cache locality.
// However, we do not observed any notable difference in execution
// time, from the simpler solution, of assigning to threads 
// row segments of the matrix
 
import scalaExec.Interpreter.GlobalValues._
import scalaExec.Interpreter.GlobalValues

import java.util.concurrent.Callable
import java.util.concurrent.ExecutionException
import java.util.concurrent.Future
import java.util.concurrent.FutureTask

import edu.emory.mathcs.utils.ConcurrencyUtils

object nextThreadId {
	var nextId = -1
	def getNextId = { nextId += 1; nextId } 
	def  resetThreadIds = { nextId = -1 }
}

class mm(v: Array[Array[Double]]) extends scalaSci.RichDouble2DArray(v) {
	
// Array[Array[Double]] + Array[Array[Double]]
 def +++ (that: Array[Array[Double]]): RichDouble2DArray =  {
  var   N = v.length;   var M = v(0).length;
   var useMultithreading = if (N*M > GlobalValues.multithreadingOpLimit) true else false
   if (useMultithreading)  {
  var  vr = Array.ofDim[Double] (N, M)   // for computing the return Matrix
  var nthreads = ConcurrencyUtils.getNumberOfThreads
  nthreads = Math.min(nthreads, N)
  var futures = new Array[Future[_]](nthreads)
  var rowsPerThread = (N / nthreads).toInt  // how many rows the thread processes
 //var idxsPerThread = Array.ofDim[Int](nthreads, rowsPerThread)
  
  var threadId = 0  // the current threadId
  nextThreadId.resetThreadIds
  while (threadId < nthreads)  {  // for all threads 
    
 futures(threadId) = ConcurrencyUtils.submit(new Runnable() {
    def run = {
      var currentThreadId = nextThreadId.getNextId
      var row = 0   
      while (row < N-nthreads) {  
        var col = 0
        var rowId = row + currentThreadId
        while (col < M) {
        	 vr(rowId)(col) = v(rowId)(col)+that(rowId)(col)
           col += 1
        }
       row += nthreads
      }
   }
  
        })
        threadId += 1
        
  }  // for all threads

  ConcurrencyUtils.waitForCompletion(futures)

        
    
  return new RichDouble2DArray (vr)
   }
   else {  // serial addition
    var result = Array.ofDim[Double](N,M)
    var r = 0; var c= 0
     while  (r <  N)   {
        c = 0
       while  (c < M) {  
         result(r)(c) = that(r)(c) + v(r)(c)
         c += 1
       }
       r += 1
     }
    new RichDouble2DArray(result)
     
   }
   
  }
}


var N=1000; var M=2000
var x = Ones(N,M)
var xx = new mm(x)
var nreps=100
tic
var yy = xx +++  xx
for (k<-0 until nreps)
 yy = xx +++ xx

var tmp=toc

var x0 = ones0(N,M)
tic
var yys = x0+ x
for (k<-0 until nreps)
 yys = x0 + x0
var tms=toc

