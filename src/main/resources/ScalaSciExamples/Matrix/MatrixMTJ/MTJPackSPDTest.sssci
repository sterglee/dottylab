import no.uib.cipr.matrix.DenseMatrix
import no.uib.cipr.matrix.LowerSPDPackMatrix
import no.uib.cipr.matrix.Matrices
import no.uib.cipr.matrix.Matrix
import no.uib.cipr.matrix.PackCholesky
import no.uib.cipr.matrix.UpperSPDPackMatrix

import no.uib.cipr.matrix.Utilities



var  n = 5
// matrix is "packed" since the upper part is not stored by symmetry
var      L = new LowerSPDPackMatrix(n)

Utilities.lowerPopulate(L)  // populate the lower part: the upper part is populated by symmetry
Utilities.addDiagonal(L, 1)   // add 1 to all the diagonal elements
// assure symmetric posistive definiteness i.e. real positive eigenvalues
while (!Utilities.spd(L))
     Utilities.addDiagonal(L, 1)
var I = Matrices.identity(n)  // construct an Identity matrix
// solve the corresponding system: L*x = I  returning solution in x
var xl = L.solve(I, new DenseMatrix(n,n))  
//  form: yl = 1.0*L*xl + 0
var yl = L.multAdd(1.0, xl, new DenseMatrix(n,n) )


// matrix is "packed" since the lower part is not stored by symmetry
var  U = new UpperSPDPackMatrix(n)
Utilities.upperPopulate(U)    // populate the upper part: the lower part is populated by symmetry
Utilities.addDiagonal(U, 1)    // add 1 to all the diagonal elements
// assure symmetric posistive definiteness i.e. real positive eigenvalues
while (!Utilities.spd(U))
          Utilities.addDiagonal(U, 1);
I = Matrices.identity(n)  // construct an Identity matrix
// solve the corresponding system: L*x = I  returning solution in x
var xu = U.solve(I, new DenseMatrix(n,n))  
//  form: y = 1.0*U*xu + 0
var yu = U.multAdd(1.0, xu, new DenseMatrix(n,n) )


