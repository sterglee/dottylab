
import org.apache.commons.math._
import org.apache.commons.math.ode._ 
import org.apache.commons.math.ode.events._ 
import org.apache.commons.math.ode.nonstiff._
import org.apache.commons.math.ode.sampling._

close("all")

class CircleODE(c: Array[Double], omega: Double) extends AnyRef with   FirstOrderDifferentialEquations  {
  
 
def  getDimension = 2

def computeDerivatives(t: Double, y: Array[Double], yDot: Array[Double]) =  {
  yDot(0) = omega*(c(1)-y(1))
  yDot(1) = omega*(y(0)-c(0))
  }
}

 var stepHandler = new StepHandler() {

   def  reset = { }
   
 
   var cnt=0
   var warmUpCnt=5
   def  handleStep( interpolator: StepInterpolator, isLast: Boolean)= {
       var  t = interpolator.getCurrentTime()
       var  y = interpolator.getInterpolatedState()
       warmUpCnt -= 1
      if (warmUpCnt < 0) {
       cnt += 1
      
        vt = y(0) :: vt
        vy = y(1) :: vy
        }
      
     }
     
     def requiresDenseOutput = false

}
 
     
   var vt =  List[Double]() //Array[Double](M)
   var vy =  List[Double]()

var dp853 =  new DormandPrince853Integrator(1.0e-8, 100.0, 1.0e-10, 1.0e-10)
dp853.addStepHandler(stepHandler)


var ode = new CircleODE( Array(1.0, 1.0), 0.1)
var y = Array(0.0, 10.0)
dp853.integrate(ode, 0.0, y, 1600, y)



plot(vt.toArray, vy.toArray)
